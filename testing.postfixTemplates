## assert operations ##

.assertNoerr : assert no error
    ERROR    →  assert.NoError(t, $expr$, "$end$")

.assertEqual : assert equal
    ANY      →  assert.Equal(t, $VAR0$, $expr$, "$end$")

.assertNil : assert nil
    NIL      →  assert.Nil(t, $expr$, "$end$")

.assertNotNil : assert not nil
    NIL      →  assert.NotNil(t, $expr$, "$end$")

.assertTrue : assert true
    BOOLEAN  →  assert.True(t, $expr$, "$end$")

.assertFalse : assert false
    BOOLEAN  →  assert.False(t, $expr$, "$end$")

.assertLen : assert length
    NIL      →  assert.Len(t, $expr$, $VAR0$, "$end$")


## create tase case ##

.test : generate test case
    ANY  →  func Test$expr$(t *testing.T) {\
                  $END$\
               }

.bench : generate benchmark case
    ANY → func Benchmark$expr$(b *testing.B) {\
                for i := 0; i < b.N; i++ {\
                  $END$\
             }\
}